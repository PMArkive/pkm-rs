use super::{pkx::Pkx, poke_crypto, types};
use core::convert::TryInto;
use no_std_io::Reader;
use safe_transmute::TriviallyTransmutable;

type Pk8Bytes = [u8; Pk8::STORED_SIZE];

pub struct Pk8 {
    data: Pk8Bytes,
}

impl Default for Pk8 {
    fn default() -> Self {
        Self {
            data: [0; Pk8::STORED_SIZE],
        }
    }
}

impl Reader for Pk8 {
    fn get_slice(&self) -> &[u8] {
        &self.data
    }
}

impl Pkx for Pk8 {
    type StoredBytes = Pk8Bytes;
    const STORED_SIZE: usize = 328;
    const BLOCK_SIZE: usize = 80;

    fn new(data: Self::StoredBytes) -> Self {
        let seed_bytes: [u8; 4] = data[0..4].try_into().unwrap();
        let seed = u32::from_le_bytes(seed_bytes);
        Self {
            data: poke_crypto::decrypt::<{ Pk8::STORED_SIZE }, { Pk8::BLOCK_SIZE }>(data, seed),
        }
    }

    fn encryption_constant(&self) -> u32 {
        self.default_read_le(0x00)
    }

    fn sanity(&self) -> u16 {
        self.default_read_le(0x04)
    }

    fn checksum(&self) -> u16 {
        self.default_read_le(0x06)
    }

    fn species(&self) -> types::Species {
        self.default_read_le::<u16>(0x08).into()
    }

    fn tid(&self) -> u16 {
        self.default_read_le(0x0C)
    }

    fn sid(&self) -> u16 {
        self.default_read_le(0x0E)
    }

    fn ability(&self) -> types::Ability {
        self.default_read::<u16>(0x14).into()
    }

    fn ability_number(&self) -> types::AbilityNumber {
        self.default_read::<u8>(0x16).into()
    }

    fn pid(&self) -> u32 {
        self.default_read_le(0x1C)
    }

    fn nature(&self) -> types::Nature {
        self.default_read::<u8>(0x20).into()
    }

    fn minted_nature(&self) -> types::Nature {
        self.default_read::<u8>(0x21).into()
    }

    fn gender(&self) -> types::Gender {
        let byte = self.default_read::<u8>(0x22);
        ((byte >> 2) & 3).into()
    }

    fn evs(&self) -> types::Stats {
        types::Stats {
            hp: self.default_read(0x26),
            atk: self.default_read(0x27),
            def: self.default_read(0x28),
            spe: self.default_read(0x29),
            spa: self.default_read(0x2A),
            spd: self.default_read(0x2B),
        }
    }

    fn move1(&self) -> types::Move {
        self.default_read::<u16>(0x72).into()
    }

    fn move2(&self) -> types::Move {
        self.default_read::<u16>(0x74).into()
    }

    fn move3(&self) -> types::Move {
        self.default_read::<u16>(0x76).into()
    }

    fn move4(&self) -> types::Move {
        self.default_read::<u16>(0x78).into()
    }

    fn iv32(&self) -> u32 {
        self.default_read_le(0x8C)
    }

    fn current_handler(&self) -> u8 {
        self.default_read(0xC4)
    }

    fn ht_friendship(&self) -> u8 {
        self.default_read(0xC8)
    }

    fn language(&self) -> types::Language {
        self.default_read::<u8>(0xE2).into()
    }

    fn ot_friendship(&self) -> u8 {
        self.default_read(0x112)
    }

    fn calculate_checksum(&self) -> u16 {
        poke_crypto::calculate_checksum(&self.data[8..Pk8::STORED_SIZE])
    }
}

#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Pk8Data(Pk8Bytes);

impl Default for Pk8Data {
    fn default() -> Self {
        Self([0; Pk8::STORED_SIZE])
    }
}

// This is safe because the bytes in Pk8Data can be anything
unsafe impl TriviallyTransmutable for Pk8Data {}

impl From<Pk8Data> for Pk8 {
    fn from(data: Pk8Data) -> Self {
        Self::new(data.0)
    }
}

#[cfg(test)]
mod test {
    use super::*;

    const TEST_EKX: Pk8Bytes = [
        0x80, 0x5C, 0x86, 0x02, 0x00, 0x00, 0x2E, 0x29, 0x20, 0x0E, 0x56, 0x4F, 0xAA, 0xF1, 0xF4,
        0x2F, 0xA5, 0x9E, 0xCC, 0xFE, 0x8B, 0xF2, 0x32, 0x20, 0x51, 0xD1, 0x99, 0xDD, 0x42, 0xD2,
        0x55, 0xE5, 0x05, 0x1F, 0x85, 0x2E, 0x6A, 0xED, 0x2A, 0x14, 0x5A, 0x21, 0x96, 0xDB, 0x76,
        0x2E, 0xD6, 0x4E, 0x72, 0xA0, 0x72, 0x08, 0xA0, 0x2B, 0x59, 0x2D, 0xEB, 0x5C, 0xBB, 0xC5,
        0x92, 0x55, 0x0C, 0x01, 0x7D, 0x2B, 0xC3, 0x59, 0xEB, 0x72, 0x18, 0x01, 0xD4, 0x35, 0x99,
        0x72, 0x8B, 0x5F, 0x13, 0xD1, 0xA9, 0x74, 0x49, 0x36, 0x90, 0xE8, 0x1E, 0x81, 0x8A, 0xB7,
        0x13, 0xFA, 0x8C, 0xA9, 0x08, 0xA4, 0x4A, 0x89, 0x60, 0xA1, 0x2F, 0x48, 0x33, 0x99, 0x3D,
        0x9E, 0x51, 0xE9, 0xC4, 0x14, 0xC9, 0xB1, 0xC8, 0x55, 0xA5, 0x23, 0xB8, 0x56, 0xAC, 0x60,
        0x00, 0x08, 0x3D, 0x27, 0x8F, 0x49, 0xDE, 0x76, 0xAA, 0xA7, 0xB0, 0x77, 0x93, 0x59, 0xFB,
        0xD8, 0xDF, 0x1E, 0x07, 0xE9, 0xA3, 0xA9, 0x80, 0xB7, 0x77, 0x93, 0xEC, 0x45, 0x86, 0x5E,
        0xEF, 0x41, 0x3F, 0x0D, 0xA1, 0xB6, 0x66, 0xF2, 0xDB, 0x86, 0x98, 0x64, 0xF2, 0xF2, 0x7F,
        0x4B, 0x86, 0xF6, 0x07, 0xDA, 0x20, 0x7F, 0x72, 0x8A, 0xA6, 0x6B, 0xE9, 0x58, 0x73, 0x7A,
        0xD5, 0xC1, 0x1E, 0xDF, 0x5E, 0xB1, 0xA0, 0xBD, 0x03, 0x11, 0xE2, 0x28, 0x53, 0x6E, 0x6B,
        0x5A, 0xC1, 0xCF, 0x38, 0x72, 0xEC, 0x04, 0xC1, 0xAD, 0xCD, 0xBD, 0x53, 0x43, 0x1C, 0x85,
        0x9B, 0x95, 0xEC, 0x74, 0xBC, 0x43, 0x6D, 0x14, 0xD2, 0x8F, 0x6F, 0x7B, 0x6E, 0xA1, 0x98,
        0xCA, 0x14, 0xB7, 0xDF, 0xF2, 0xB3, 0x26, 0x5B, 0xC3, 0xB7, 0xFA, 0xA6, 0x14, 0xBF, 0xA1,
        0x90, 0x79, 0xFE, 0xF5, 0x8D, 0xF0, 0x2B, 0xDD, 0x2B, 0xBF, 0x43, 0x48, 0xC4, 0xA1, 0xC9,
        0x71, 0x3A, 0xE8, 0xF7, 0x5E, 0x9D, 0x6C, 0xD7, 0x58, 0x63, 0xF7, 0x3F, 0x00, 0xB2, 0x7D,
        0x0A, 0xB9, 0x81, 0xE7, 0x20, 0x13, 0xE8, 0x7F, 0x8C, 0x8B, 0xCD, 0x60, 0x70, 0x63, 0xFE,
        0x84, 0xF3, 0x80, 0xF0, 0x6F, 0x9D, 0x8A, 0x01, 0xF0, 0xC5, 0xC7, 0x0F, 0x10, 0xF2, 0xFC,
        0x48, 0x57, 0x7A, 0x99, 0xCB, 0xA1, 0x1A, 0x05, 0xA5, 0x91, 0x20, 0xB1, 0x59, 0x9C, 0xE0,
        0x47, 0xDC, 0x62, 0xB7, 0x11, 0xBF, 0x12, 0x3F, 0xE2, 0x4F, 0x7B, 0xDF, 0xBC,
    ];

    #[test]
    fn should_decrypt() {
        let result: Pk8Bytes = [
            0x80, 0x5C, 0x86, 0x02, 0x00, 0x00, 0x2E, 0x29, 0x84, 0x00, 0x00, 0x00, 0x56, 0xF6,
            0x42, 0xC8, 0x40, 0x42, 0x0F, 0x00, 0x96, 0x00, 0x04, 0x00, 0x55, 0x05, 0x00, 0x00,
            0x23, 0x0F, 0x37, 0x31, 0x03, 0x03, 0x08, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x06, 0xFC,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x64, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00,
            0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x36, 0x00, 0x49, 0x00, 0x56, 0x00, 0x73, 0x00,
            0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01,
            0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x50, 0x00, 0x4B, 0x00, 0x48, 0x00, 0x65, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
            0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x69, 0x00,
            0x74, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00,
            0x92, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x07, 0x0F, 0x00, 0x97, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x19, 0x00, 0x00, 0x00, 0x94, 0x00, 0x0B, 0x1E,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.get_slice(), result);
    }

    #[test]
    fn pk8_data_size_should_be_232() {
        assert_eq!(core::mem::size_of::<Pk8Data>(), Pk8::STORED_SIZE);
    }

    #[test]
    fn should_read_species() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.species(), types::Species::Ditto);
    }

    #[test]
    fn should_read_pid() {
        let pkx = Pk8::new(TEST_EKX);
        let pid = 0x31370F23;
        assert_eq!(pkx.pid(), pid)
    }

    #[test]
    fn should_read_tid() {
        let pkx = Pk8::new(TEST_EKX);
        let tid = 63062;
        assert_eq!(pkx.tid(), tid)
    }

    #[test]
    fn should_read_sid() {
        let pkx = Pk8::new(TEST_EKX);
        let sid = 51266;
        assert_eq!(pkx.sid(), sid)
    }

    #[test]
    fn should_read_tsv() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.tsv(), 993)
    }

    #[test]
    fn should_read_psv() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.psv(), 993)
    }

    #[test]
    fn should_read_nature() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.nature(), types::Nature::Adamant)
    }

    #[test]
    fn should_read_minted_nature() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.minted_nature(), types::Nature::Adamant)
    }

    #[test]
    fn should_read_ability() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.ability(), types::Ability::Imposter)
    }

    #[test]
    fn should_read_ability_number() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.ability_number(), types::AbilityNumber::Hidden)
    }

    #[test]
    fn should_read_hidden_power() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.hidden_power(), types::HiddenPower::Dark)
    }

    #[test]
    fn should_read_language() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.language(), types::Language::French)
    }

    #[test]
    fn should_read_gender() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.gender(), types::Gender::Genderless)
    }

    #[test]
    fn should_read_move1() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.move1(), types::Move::Transform)
    }

    #[test]
    fn should_read_move2() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.move2(), types::Move::None)
    }

    #[test]
    fn should_read_move3() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.move3(), types::Move::None)
    }

    #[test]
    fn should_read_move4() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.move4(), types::Move::None)
    }

    #[test]
    fn should_read_ivs() {
        let pkx = Pk8::new(TEST_EKX);
        let stats = types::Stats {
            hp: 31,
            atk: 31,
            def: 31,
            spa: 31,
            spd: 31,
            spe: 31,
        };
        assert_eq!(pkx.ivs(), stats)
    }

    #[test]
    fn should_read_evs() {
        let pkx = Pk8::new(TEST_EKX);
        let stats = types::Stats {
            hp: 252,
            atk: 0,
            def: 6,
            spa: 0,
            spd: 0,
            spe: 252,
        };
        assert_eq!(pkx.evs(), stats)
    }

    #[test]
    fn should_read_ot_friendship() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.ot_friendship(), 70)
    }

    #[test]
    fn should_read_ht_friendship() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.ht_friendship(), 50)
    }

    #[test]
    fn should_read_is_egg() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.is_egg(), false)
    }

    #[test]
    fn should_read_current_handler() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.current_handler(), 1)
    }

    #[test]
    fn should_read_current_friendship() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.current_friendship(), 50)
    }

    #[test]
    fn should_read_sanity() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.sanity(), 0)
    }

    #[test]
    fn should_read_checksum() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.checksum(), 0x292e)
    }

    #[test]
    fn should_calculate_checksum() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.calculate_checksum(), 0x292e)
    }

    #[test]
    fn should_read_is_valid() {
        let pkx = Pk8::new(TEST_EKX);
        assert_eq!(pkx.is_valid(), true)
    }

    #[test]
    fn should_return_not_shiny_for_default() {
        let pkx = Pk8::default();
        assert_eq!(pkx.is_shiny(), false)
    }
}
