use super::{pkx::Pkx, poke_crypto, types};
use core::convert::TryInto;
use no_std_io::Reader;

pub type Pa8Bytes = [u8; Pa8::STORED_SIZE];

pub struct Pa8 {
    data: Pa8Bytes,
}

impl Default for Pa8 {
    fn default() -> Self {
        Self {
            data: [0; Pa8::STORED_SIZE],
        }
    }
}

impl Reader for Pa8 {
    fn get_slice(&self) -> &[u8] {
        &self.data
    }
}

impl Pkx for Pa8 {
    type StoredBytes = Pa8Bytes;
    const STORED_SIZE: usize = 360;
    const BLOCK_SIZE: usize = 88;

    fn new(data: Self::StoredBytes) -> Self {
        let seed_bytes: [u8; 4] = data[0..4].try_into().unwrap();
        let seed = u32::from_le_bytes(seed_bytes);
        Self {
            data: poke_crypto::decrypt::<{ Pa8::STORED_SIZE }, { Pa8::BLOCK_SIZE }>(data, seed),
        }
    }

    fn encryption_constant(&self) -> u32 {
        self.default_read_le(0x00)
    }

    fn sanity(&self) -> u16 {
        self.default_read_le(0x04)
    }

    fn checksum(&self) -> u16 {
        self.default_read_le(0x06)
    }

    fn species(&self) -> types::Species {
        self.default_read_le::<u16>(0x08).into()
    }

    fn tid(&self) -> u16 {
        self.default_read_le(0x0C)
    }

    fn sid(&self) -> u16 {
        self.default_read_le(0x0E)
    }

    fn ability(&self) -> types::Ability {
        self.default_read::<u16>(0x14).into()
    }

    fn ability_number(&self) -> types::AbilityNumber {
        self.default_read::<u8>(0x16).into()
    }

    fn pid(&self) -> u32 {
        self.default_read_le(0x1C)
    }

    fn nature(&self) -> types::Nature {
        self.default_read::<u8>(0x20).into()
    }

    fn minted_nature(&self) -> types::Nature {
        self.nature()
    }

    fn gender(&self) -> types::Gender {
        let byte = self.default_read::<u8>(0x22);
        ((byte >> 2) & 3).into()
    }

    fn evs(&self) -> types::Stats {
        types::Stats {
            hp: self.default_read(0x26),
            atk: self.default_read(0x27),
            def: self.default_read(0x28),
            spe: self.default_read(0x29),
            spa: self.default_read(0x2A),
            spd: self.default_read(0x2B),
        }
    }

    fn move1(&self) -> types::Move {
        self.default_read::<u16>(0x54).into()
    }

    fn move2(&self) -> types::Move {
        self.default_read::<u16>(0x56).into()
    }

    fn move3(&self) -> types::Move {
        self.default_read::<u16>(0x58).into()
    }

    fn move4(&self) -> types::Move {
        self.default_read::<u16>(0x5a).into()
    }

    fn iv32(&self) -> u32 {
        self.default_read_le(0x94)
    }

    fn current_handler(&self) -> u8 {
        self.default_read(0xD4)
    }

    fn ht_friendship(&self) -> u8 {
        self.default_read(0xD8)
    }

    fn language(&self) -> types::Language {
        self.default_read::<u8>(0xF2).into()
    }

    fn ot_friendship(&self) -> u8 {
        self.default_read(0x11A)
    }

    fn calculate_checksum(&self) -> u16 {
        poke_crypto::calculate_checksum(&self.data[8..Pa8::STORED_SIZE])
    }
}

impl From<Pa8Bytes> for Pa8 {
    fn from(data: Pa8Bytes) -> Self {
        Self::new_or_default(data)
    }
}

#[cfg(test)]
mod test {
    use super::*;

    const TEST_EKX: Pa8Bytes = [
        0x6d, 0xed, 0x68, 0xac, 0x00, 0x00, 0x8b, 0x31, 0x08, 0xb0, 0x20, 0x98, 0x54, 0xb5, 0x9e,
        0x98, 0xe2, 0x86, 0x37, 0x1e, 0x5d, 0x39, 0x4d, 0x22, 0xe2, 0x22, 0x6e, 0x75, 0x52, 0x0f,
        0x16, 0xec, 0x06, 0x8e, 0x23, 0x53, 0xb3, 0x37, 0x40, 0xe3, 0x9f, 0xf8, 0xd2, 0xb6, 0x36,
        0x99, 0x82, 0xd0, 0xbc, 0x09, 0x1c, 0x5e, 0xec, 0xe9, 0x5c, 0x62, 0xc3, 0x73, 0xe3, 0xa1,
        0xca, 0x7c, 0x85, 0xe7, 0x95, 0xf3, 0x76, 0x10, 0x63, 0xab, 0x2b, 0x09, 0xf0, 0x1d, 0x77,
        0x59, 0xfa, 0x03, 0x18, 0xa7, 0x14, 0x9f, 0x5a, 0x5e, 0xfd, 0x09, 0xba, 0x50, 0x93, 0xc6,
        0x2d, 0x3e, 0x38, 0xdd, 0xe3, 0x90, 0xc9, 0xc9, 0x42, 0x65, 0x6f, 0x84, 0xc8, 0xc7, 0x01,
        0x4f, 0x01, 0x15, 0xdd, 0xdf, 0x44, 0xd0, 0x42, 0x3c, 0x7e, 0xc2, 0x83, 0x65, 0x34, 0x1a,
        0x43, 0x6c, 0x2b, 0xd5, 0x39, 0x8d, 0x12, 0xf7, 0xa8, 0xf9, 0xb3, 0x39, 0x96, 0xc8, 0x4f,
        0xae, 0x26, 0xbc, 0x6e, 0xa7, 0xf1, 0x27, 0xcf, 0x6a, 0x24, 0x01, 0x57, 0xab, 0x66, 0x2b,
        0xbe, 0x3b, 0x8b, 0xf7, 0x0f, 0x8c, 0xa3, 0x71, 0x37, 0xa7, 0xee, 0x9d, 0x36, 0x5b, 0xab,
        0xb0, 0xb2, 0x4d, 0xc4, 0x1b, 0xd3, 0xc7, 0xc6, 0x76, 0xe5, 0x50, 0xde, 0x47, 0xf0, 0x86,
        0x02, 0xec, 0xe2, 0x70, 0xa9, 0xd9, 0x26, 0x63, 0x91, 0x6b, 0xf9, 0x16, 0xf2, 0x13, 0x78,
        0x4c, 0x33, 0xbd, 0x7c, 0xbc, 0x7d, 0xa2, 0x22, 0xf7, 0xe3, 0x97, 0x4b, 0x67, 0xce, 0xb4,
        0xa4, 0xe0, 0xb0, 0x0b, 0x9f, 0x2c, 0x10, 0x18, 0x8f, 0xcd, 0x5b, 0x54, 0x3b, 0xef, 0x37,
        0x0b, 0x66, 0x15, 0x17, 0x8d, 0xe2, 0xcc, 0x67, 0x31, 0xa3, 0x4e, 0x90, 0x16, 0x08, 0xef,
        0x97, 0x46, 0xd7, 0x30, 0x2f, 0xb0, 0xcb, 0xb2, 0x71, 0x7a, 0xa8, 0xbf, 0x9b, 0x8d, 0x24,
        0x5c, 0x7c, 0x95, 0x2d, 0x13, 0x82, 0x67, 0x59, 0xc8, 0x7d, 0x4c, 0x7b, 0x51, 0x98, 0xce,
        0xb5, 0xd3, 0x19, 0x66, 0x80, 0xad, 0xdf, 0x43, 0x7b, 0x66, 0xbe, 0x96, 0x0e, 0x7f, 0x29,
        0x91, 0x17, 0x5d, 0xc4, 0x36, 0x3a, 0xc8, 0xda, 0x25, 0x96, 0xbf, 0xce, 0x36, 0xe7, 0xbb,
        0xf2, 0x7b, 0x58, 0xfc, 0x76, 0xf6, 0x9d, 0x19, 0x4a, 0xc9, 0x04, 0x1a, 0x28, 0xe1, 0x9e,
        0x72, 0x1e, 0x81, 0xbb, 0x14, 0x4e, 0xf5, 0x3b, 0xac, 0xcb, 0x69, 0x8f, 0xda, 0xad, 0x99,
        0x60, 0x53, 0xd8, 0x4a, 0x35, 0x9b, 0xf1, 0x65, 0x7b, 0x95, 0x3a, 0x77, 0xfa, 0x5e, 0x20,
        0xbc, 0x75, 0xf2, 0xd3, 0xb7, 0xf3, 0x18, 0x9c, 0x69, 0x1b, 0xfc, 0x3b, 0x5a, 0x78, 0xa8,
    ];

    #[test]
    fn should_decrypt() {
        let result: Pa8Bytes = [
            0x6d, 0xed, 0x68, 0xac, 0x00, 0x00, 0x8b, 0x31, 0x29, 0x00, 0x00, 0x00, 0x23, 0x2f,
            0x97, 0xf4, 0xd9, 0x02, 0x00, 0x00, 0x27, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x4b, 0xba, 0xab, 0x02, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xa9, 0x29, 0x00,
            0x10, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x14, 0x00, 0x00, 0x5a, 0x00,
            0x75, 0x00, 0x62, 0x00, 0x61, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x03, 0x94, 0xc3, 0x05, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x4a, 0x4a, 0x8a, 0x42, 0x3a, 0x16, 0x8a, 0x42, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.get_slice(), result);
    }

    #[test]
    fn pa8_data_size_should_be_232() {
        assert_eq!(core::mem::size_of::<Pa8Bytes>(), Pa8::STORED_SIZE);
    }

    #[test]
    fn should_read_species() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.species(), types::Species::Zubat);
    }

    #[test]
    fn should_read_pid() {
        let pkx = Pa8::new(TEST_EKX);
        let pid = 0x02abba4b;
        assert_eq!(pkx.pid(), pid)
    }

    #[test]
    fn should_read_tid() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.tid(), 12067)
    }

    #[test]
    fn should_read_sid() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.sid(), 62615)
    }

    #[test]
    fn should_read_tsv() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.tsv(), 3515)
    }

    #[test]
    fn should_read_psv() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.psv(), 2958)
    }

    #[test]
    fn should_read_nature() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.nature(), types::Nature::Naughty)
    }

    #[test]
    fn should_read_minted_nature() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.minted_nature(), types::Nature::Naughty)
    }

    #[test]
    fn should_read_ability() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.ability(), types::Ability::InnerFocus)
    }

    #[test]
    fn should_read_ability_number() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.ability_number(), types::AbilityNumber::First)
    }

    #[test]
    fn should_read_hidden_power() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.hidden_power(), types::HiddenPower::Ground)
    }

    #[test]
    fn should_read_language() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.language(), types::Language::English)
    }

    #[test]
    fn should_read_gender() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.gender(), types::Gender::Female)
    }

    #[test]
    fn should_read_move1() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.move1(), types::Move::Gust)
    }

    #[test]
    fn should_read_move2() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.move2(), types::Move::Hypnosis)
    }

    #[test]
    fn should_read_move3() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.move3(), types::Move::None)
    }

    #[test]
    fn should_read_move4() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.move4(), types::Move::None)
    }

    #[test]
    fn should_read_ivs() {
        let pkx = Pa8::new(TEST_EKX);
        let stats = types::Stats {
            hp: 3,
            atk: 0,
            def: 5,
            spa: 28,
            spd: 2,
            spe: 7,
        };
        assert_eq!(pkx.ivs(), stats)
    }

    #[test]
    fn should_read_evs() {
        let pkx = Pa8::new(TEST_EKX);
        let stats = types::Stats {
            hp: 0,
            atk: 0,
            def: 0,
            spa: 0,
            spd: 0,
            spe: 0,
        };
        assert_eq!(pkx.evs(), stats)
    }

    #[test]
    fn should_read_ot_friendship() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.ot_friendship(), 0)
    }

    #[test]
    fn should_read_ht_friendship() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.ht_friendship(), 0)
    }

    #[test]
    fn should_read_is_egg() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.is_egg(), false)
    }

    #[test]
    fn should_read_current_handler() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.current_handler(), 0)
    }

    #[test]
    fn should_read_current_friendship() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.current_friendship(), 0)
    }

    #[test]
    fn should_read_sanity() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.sanity(), 0)
    }

    #[test]
    fn should_read_checksum() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.checksum(), 0x318b)
    }

    #[test]
    fn should_calculate_checksum() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.calculate_checksum(), 0x318b)
    }

    #[test]
    fn should_read_is_valid() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.is_valid(), true)
    }

    #[test]
    fn should_read_is_shiny_false() {
        let pkx = Pa8::new(TEST_EKX);
        assert_eq!(pkx.is_shiny(), false)
    }

    #[test]
    fn should_read_is_shiny_true() {
        let shiny_ekx = [
            0x40, 0xea, 0xe2, 0x40, 0x00, 0x00, 0x81, 0x07, 0x7d, 0x31, 0xfb, 0xc3, 0x27, 0x38,
            0x78, 0x10, 0x76, 0xe8, 0x1e, 0x2c, 0x66, 0xc5, 0x69, 0x68, 0xf2, 0x15, 0x9f, 0x59,
            0xe2, 0xe7, 0xe0, 0x6c, 0x0b, 0x14, 0x93, 0x4f, 0x4d, 0x6a, 0x39, 0x65, 0xbd, 0x08,
            0x62, 0x3b, 0xe3, 0x20, 0xe4, 0x5c, 0xfd, 0xde, 0xc0, 0x99, 0x9a, 0x14, 0x8f, 0xee,
            0x0f, 0xbd, 0xfe, 0x30, 0x97, 0xb1, 0x83, 0x9d, 0x18, 0x8c, 0xc6, 0xe2, 0xe4, 0x2e,
            0x4e, 0x61, 0xf2, 0x64, 0x71, 0x9a, 0x60, 0xf5, 0xa2, 0x47, 0x3f, 0xf6, 0x86, 0xdb,
            0xf6, 0x67, 0x7d, 0x50, 0xc0, 0x37, 0x80, 0xb4, 0x11, 0xff, 0x89, 0xe8, 0xe6, 0xfe,
            0xd4, 0x19, 0x4e, 0x41, 0xc4, 0xa5, 0xa9, 0x48, 0x32, 0xed, 0x73, 0x93, 0x63, 0x2a,
            0x99, 0x4c, 0x0a, 0x35, 0xa0, 0x13, 0xf3, 0x51, 0x32, 0xad, 0x51, 0x48, 0xc4, 0xf3,
            0xc1, 0x0c, 0x73, 0x59, 0x84, 0xf2, 0x51, 0x07, 0x7c, 0x8d, 0xb0, 0xf3, 0xec, 0xd3,
            0x33, 0x78, 0x17, 0xad, 0xa7, 0xd1, 0x24, 0x82, 0xfd, 0xd6, 0xf4, 0xa8, 0xd1, 0xe9,
            0xd5, 0x2c, 0x65, 0xfa, 0x3e, 0x9f, 0x04, 0x41, 0xce, 0xca, 0xf2, 0x61, 0x95, 0x6d,
            0x14, 0xb3, 0x2a, 0x13, 0xf3, 0x0f, 0xf0, 0xd5, 0x48, 0x16, 0xed, 0xc6, 0xb2, 0x0e,
            0xbf, 0x0d, 0x4c, 0x2f, 0xbe, 0x0e, 0xe9, 0x14, 0x4f, 0x1b, 0xfb, 0xe7, 0xec, 0xf0,
            0x75, 0xfd, 0x73, 0xa5, 0x22, 0xb1, 0xb3, 0x23, 0x48, 0x06, 0x5f, 0x19, 0x97, 0x1c,
            0xbe, 0xbf, 0xa4, 0x0a, 0xd6, 0x4a, 0x8f, 0x04, 0xed, 0x96, 0x86, 0x2c, 0x87, 0xf2,
            0x31, 0xd4, 0x57, 0x33, 0x5f, 0xa1, 0xb4, 0xae, 0x66, 0xc5, 0x92, 0xc2, 0xca, 0x65,
            0x1e, 0x42, 0xf2, 0x27, 0x31, 0x71, 0xf8, 0x5d, 0xfa, 0x4c, 0xc8, 0x05, 0x8d, 0xfa,
            0xaf, 0x61, 0xb6, 0x9c, 0x99, 0xb8, 0xc8, 0x70, 0x76, 0x80, 0x3b, 0x2d, 0xad, 0x44,
            0x0e, 0x81, 0x49, 0xd9, 0x01, 0x49, 0x69, 0x8d, 0x1e, 0xb8, 0xbe, 0xca, 0x5c, 0x03,
            0x2e, 0xb2, 0x08, 0x8b, 0x6d, 0x5c, 0xec, 0xa7, 0x70, 0x40, 0x37, 0x28, 0x78, 0xcf,
            0x33, 0x6d, 0x16, 0xc2, 0xb2, 0x54, 0x5e, 0x19, 0x57, 0xd5, 0x80, 0x81, 0x9e, 0xd9,
            0x9a, 0x87, 0xad, 0x5e, 0x0b, 0x47, 0x06, 0x46, 0xbe, 0x9a, 0x7e, 0xc8, 0x33, 0xe0,
            0xde, 0x08, 0x7d, 0xb3, 0xdd, 0x4c, 0xbb, 0x29, 0x45, 0x27, 0xdd, 0x1e, 0x86, 0xdc,
            0xac, 0xec, 0x0a, 0x13, 0x71, 0xa4, 0xfe, 0x82, 0x37, 0xa9, 0xf6, 0x65, 0xce, 0xc3,
            0xf8, 0xe8, 0xa0, 0xa5, 0x36, 0x82, 0x37, 0x55, 0xfa, 0x98,
        ];
        let pkx = Pa8::new(shiny_ekx);
        assert_eq!(pkx.is_shiny(), true)
    }

    #[test]
    fn should_return_not_shiny_for_default() {
        let pkx = Pa8::default();
        assert_eq!(pkx.is_shiny(), false)
    }
}
